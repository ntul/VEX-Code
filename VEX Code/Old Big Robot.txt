#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    gyro,           sensorGyro)
#pragma config(Sensor, in2,    LeftLiftPot,    sensorPotentiometer)
#pragma config(Sensor, in3,    RightLiftPot,   sensorPotentiometer)
#pragma config(Sensor, in4,    Expander,       sensorAnalog)
#pragma config(Sensor, dgtl1,  RightFrontUltra, sensorSONAR_inch)
#pragma config(Sensor, dgtl5,  LeftFrontUltra, sensorSONAR_inch)
#pragma config(Sensor, dgtl9,  FrontUltra,     sensorSONAR_inch)
#pragma config(Sensor, dgtl11, pneumatics,     sensorDigitalOut)
#pragma config(Sensor, dgtl12, LED,            sensorDigitalOut)
#pragma config(Sensor, I2C_1,  RightBE,        sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           RightB,        tmotorVex393_HBridge, openLoop, reversed, encoderPort, I2C_1)
#pragma config(Motor,  port2,           LeftLiftBot,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           RightLiftTop,  tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           RightC,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           RightAD,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           LeftAD,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           LeftLiftTop,   tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           RightLiftBot,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           LeftC,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          LeftB,         tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(60)
#pragma userControlDuration(60)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!
#include "Big Robot Methods.h"
#include "BigBlueAuto.h"
/*
const short leftButton = 1;
const short centerButton = 2;
const short rightButton = 4;

//Wait for Press--------------------------------------------------
void waitForPress()
{
	while(nLCDButtons == 0){}
	wait1Msec(5);
}
//----------------------------------------------------------------

//Wait for Release------------------------------------------------
void waitForRelease()
{
	while(nLCDButtons != 0){}
	wait1Msec(5);
}
//----------------------------------------------------------------

		//Declare count variable to keep track of our choice
	int count = 0;

*/
void pre_auton(){
	SensorValue[pneumatics]=1;
	SensorValue[LED]=1;
	//Completely clear out any previous sensor readings by setting the port to "sensorNone"
	SensorType[in1] = sensorNone;
	wait1Msec(1000);
	//Reconfigure Analog Port 8 as a Gyro sensor and allow time for ROBOTC to calibrate it
	SensorType[in1] = sensorGyro;
	wait1Msec(2000);
/*

	//------------- Beginning of User Interface Code ---------------
	//Clear LCD
	clearLCDLine(0);
	clearLCDLine(1);
		string mainBattery, powerExpander;
		bLCDBacklight = true;									// Turn on LCD Backlight
	//Loop while center button is not pressed
	while(nLCDButtons != centerButton)
	{
		//Switch case that allows the user to choose from 4 different options
		switch(count){
		case 0:
			//Display first choice
			displayLCDCenteredString(0, "Red Autonomous");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();
			//Increment or decrement "count" based on button press
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count = 2;
			}
			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;
		case 1:
			//Display second choice
			displayLCDCenteredString(0, "Blue Autonomous");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();
			//Increment or decrement "count" based on button press
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}
			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;
			case 2:


		// An infinite loop to keep the program running until you terminate it

		//Display the Primary Robot battery voltage
		displayLCDString(0, 0, "Primary: ");
		sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0,'V'); //Build the value to be displayed
		displayNextLCDString(mainBattery);

		//Display the battery voltage of a power exapnder
		displayLCDString(1, 0, "Expander: ");
		sprintf(powerExpander, "%1.2f%c", (float)SensorValue[in4]/275.0,'V'); //Build the value to be displayed
		displayNextLCDString(powerExpander);

		//Short delay for the LCD refresh rate

			//Increment or decrement "count" based on button press
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}
			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count=0;
			}
					else if(nLCDButtons== centerButton)
			{
				waitForRelease();
				count=0;
			}


			break;
		default:
			count = 0;
			break;



}
	}
	//------------- End of User Interface Code ---------------------


*/
}

task autonomous(){
/*

		//------------- Beginning of Robot Movement Code ---------------
	//Clear LCD
	clearLCDLine(0);
	clearLCDLine(1);
	//Switch Case that actually runs the user choice
	switch(count){
	case 0:
		//If count = 0, run the code correspoinding with choice 1
		displayLCDCenteredString(0, "Red autonomous");
		displayLCDCenteredString(1, "is running!");
		autonomousRed();
		break;
	case 1:
		//If count = 1, run the code correspoinding with choice 2
		displayLCDCenteredString(0, "Blue autonomous");
		displayLCDCenteredString(1, "is running!");
	  autonomousBlue();
		break;
	default:
		displayLCDCenteredString(0, "No valid choice");
		displayLCDCenteredString(1, "was made!");
		break;
	}
	//------------- End of Robot Movement Code -----------------------
*/
autonomousBlue();
}





task usercontrol ()
{

	while(1 == 1)
	{




		//Drive Controls
		if((abs(vexRT[Ch2]) < 30) && (abs(vexRT[Ch1]) < 30)){
			motor[LeftAD]  = 0;
			motor[RightAD] = 0;
			motor[LeftB]  = 0;
			motor[RightB] = 0;
			motor[LeftC]  = 0;
			motor[RightC] = 0;

		}

		else {
			motor[LeftAD]  = (vexRT[Ch2] + vexRT[Ch1])*0.9;
			motor[RightAD] = (vexRT[Ch2] - vexRT[Ch1])*0.9;
			motor[LeftB]  = (vexRT[Ch2] + vexRT[Ch1])*0.9;
			motor[RightB] = (vexRT[Ch2] - vexRT[Ch1])*0.9;
			motor[LeftC]  = (vexRT[Ch2] + vexRT[Ch1])*0.9;
			motor[RightC] = (vexRT[Ch2] - vexRT[Ch1])*0.9;

		}


		//Lift on Button 5
		if(vexRT[Btn5U] == 1){
			liftUp();
		}
		else if(vexRT[Btn5D] == 1){
			liftDown();
		}
		else if(vexRT[Btn8L] == 1){
			motor[LeftLiftTop]  = 50;
			motor[RightLiftTop] = 0;
			motor[LeftLiftBot]  = 50;
			motor[RightLiftBot] = 0;

		}
		else if(vexRT[Btn8R] == 1){
			motor[LeftLiftTop]  = 0;
			motor[RightLiftTop] = 50;
			motor[LeftLiftBot]  = 0;
			motor[RightLiftBot] = 50;
		}
		else    stopLift();



		//Pneumatics
		if(vexRT[Btn6D] == 1)         // If button 7U pressed:
		{
			SensorValue[pneumatics]=0;
			//activate the solenoid for lock.
		}

		else if(vexRT[Btn6U] == 1){
			SensorValue[pneumatics]=1;
			// deactivate the solenoid for lock.
		}


	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++